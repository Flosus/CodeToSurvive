<?xml version="1.0"?>
<?xml-model href="../Schema/MapSchema.xsd"?>
<map>
    <!-- The id of the map. Use the uniqueMapId for referencing instances of maps. -->
    <mapId>ExampleMap</mapId>
    <!--
    Instanced maps are not shared with other players / groups. Two independed players will get
    different instances.
    Important: The uniqueMapId and persistencePoolUniqueId of instanced maps will get random characters
    appended to differenciate between them. e.g. "ExampleMap.fdsdkfbsgfdsfds".
    -->
    <instanced>true</instanced>
    <!-- Persistent maps will get saved and restored, if corresponding players reenter the map.
    nonpersistent maps cease to exist after every character leafs the map. -->
    <persistent>true</persistent>
    <!-- A persistent pool is cleand when all corresponding maps are deserted. -->
    <persistencePool>ExamplePool</persistencePool>
    <!-- The description of the map. This text will get shown to the player when they look around. -->
    <description>Example Description</description>
    <!-- Transitions determin where a character can walk to for exiting a map. Transitions can also
    occure when performing actions. -->
    <transitions>
        <!-- A transition defines a single point where a character can change maps. -->
        <transition>
            <!-- The target map -->
            <targetMapId>ExampleMap2</targetMapId>
            <!-- A description of the transition point, visible to the player -->
            <description>You can go here</description>
        </transition>
        <transition>
            <targetMapId>ExampleMap3</targetMapId>
            <!-- A code handler, called for getting the description, instead of a hardcoded
            description -->
            <descriptionHandler>ExampleMap_GateTransitionDescription</descriptionHandler>
            <!-- A function called for checking if a transition is allowed to occure -->
            <check>ExampleMap_TransitionCheckHandler_GateIsOpen</check>
        </transition>
    </transitions>
    <!-- Trigger are optional handlers that can occure and are used for calling specific functions. -->
    <trigger>
        <!-- Called when a character enters a map. -->
        <onMapEnter>ExampleMap_OnMapEnter</onMapEnter>
        <!-- Called when a character exits a map. -->
        <onMapExit>ExampleMap_OnMapExit</onMapExit>
        <!-- Called when a character stays on a map. -->
        <onMapStay>ExampleMap_OnMapStay</onMapStay>
        <!-- Called when saving the map -->
        <onMapSave>ExampleMap_OnMapSave</onMapSave>
        <!-- Called when loading the map or generating a new instance -->
        <onMapLoad>ExampleMap_OnMapLoad</onMapLoad>
        <!-- Called when unloading/destroying a map instance -->
        <onMapUnload>ExampleMap_OnMapUnload</onMapUnload>
    </trigger>
    <!-- Points of interest are things visible to the player. -->
    <pois>
        <!-- A single point of interest on the map -->
        <poi>
            <!-- The name of the poi. This is visible to the player -->
            <name>Lever</name>
            <!-- The Description of the poi -->
            <description>A lever beside a gate</description>
            <!-- The actions available to the player on the poi -->
            <actions>
                <action>
                    <!-- The internal id of the action -->
                    <actionId>pullingTheLever</actionId>
                    <!-- The description of the action, visible to the player -->
                    <description>A lever near the gate. You could pull it and the gate might.</description>
                    <!-- The name of the job, done by the player -->
                    <jobName>PullLever</jobName>
                    <!-- The function name for overwriting the default job handler -->
                    <jobHandler>ExampleMap_PullLever</jobHandler>
                    <!-- Optional parameters for the handler -->
                    <handlerParameter>
                        <!-- Add custome parameters here. -->
                    </handlerParameter>
                </action>
                <action>
                    <actionId>lickingTheLever</actionId>
                    <description>You could lick the lever. Why would you do this?</description>
                    <jobName>LickLever</jobName>
                    <jobHandler>ExampleMap_LickLever</jobHandler>
                </action>
            </actions>
        </poi>
        <poi>
            <name>gate</name>
            <!-- A custom function for providing the description -->
            <descriptionHandler>ExampleMap_GateDescription</descriptionHandler>
        </poi>
    </pois>
    <!-- This contains the current state of the map and the default values -->
    <state>
        <gate>
            <closed>true</closed>
        </gate>
        <flowerCount>15</flowerCount>
        <fishCatchChance>5</fishCatchChance>
    </state>
</map>